$cpu = Get-WmiObject Win32_Processor | Select-Object -First 1

function Ensure-Admin {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal   = New-Object Security.Principal.WindowsPrincipal($currentUser)
    if (-not $principal.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)) {
        Write-Host "[!] Not running as admin. Restarting with elevated privileges..." -ForegroundColor Yellow
        Start-Process -FilePath "powershell" -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
        exit
    }
}
Ensure-Admin

$startTime = Get-Date
$ErrorActionPreference = 'Stop'

Write-Host " ___        ______    ______       ___________  _______       " -ForegroundColor White
Write-Host "|\"  |      /    \" \  /\" _  \"\     (\"     _   \)/\"     \"\      " -ForegroundColor White
Write-Host "||  |     // ____  \(: ( \___)     )__/  \\__/(__/\    :)     " -ForegroundColor White
Write-Host "|:  |    /  /    ) :)\/ \             \\_ /       / ___/      " -ForegroundColor White
Write-Host " \  |___(: (____/ // //  \ _          |.  |      // \___      " -ForegroundColor White
Write-Host "( \_|:  \\        / (:   _) \         \:  |     (:  /  \"\     " -ForegroundColor White
Write-Host " \_______)\"_____/   \_______)         \__|      \_______)    " -ForegroundColor White


Write-Host "  LOC PROCESS EXPLORER" -ForegroundColor Cyan
Write-Host "  USB DEVIEW VIEWER" -ForegroundColor Cyan 
Write-Host "  Made by Justvalkz" -ForegroundColor Magenta 
Write-Host ""
Write-Host "Instruction: Wait for Process Explorer and USB Deview to appear, scroll to the bottom, then close it." -ForegroundColor Cyan 

if ($cpu.NumberOfCores -ge 4 -and $cpu.MaxClockSpeed -ge 2500) {
    Write-Host "Detected CPU: $($cpu.Name)" -ForegroundColor Green
} else {
    Write-Host "Detected CPU: $($cpu.Name)" -ForegroundColor Red
    Write-Host "This might take longer than usual" -ForegroundColor Yellow
}

Write-Host ""

$stepMsg = @(
    "Removing old Process Explorer",
    "Downloading Process Explorer",
    "Extracting Process Explorer",
    "Launching Process Explorer",
    "Downloading USBDeview",
    "Extracting USBDeview",
    "Launching USBDeview"
)

$successSteps = 0
$totalSteps   = $stepMsg.Count

function Show-Step {
    param([bool]$ok, [int]$i)
    Write-Host $stepMsg[$i]
    if ($ok) {
        Write-Host "Loading... Success" -ForegroundColor Green
        $global:successSteps++
    } else {
        Write-Host "Loading... Failed" -ForegroundColor Red
    }
}

$toolsPath            = "C:\Tools"
$procexpPath          = "C:\Tools\Process Explorer"
$usbdeviewPath        = "C:\Tools\USBDeview"

$processExplorerUrl   = "https://download.sysinternals.com/files/ProcessExplorer.zip"
$usbDeviewUrl         = "https://www.nirsoft.net/utils/usbdeview.zip"

$processExplorerZip   = "$env:TEMP\ProcessExplorer.zip"
$usbDeviewZip         = "$env:TEMP\usbdeview.zip"

try { Get-Process -Name procexp,procexp64 -ErrorAction SilentlyContinue | Stop-Process -Force } catch {}

$removed = $false
try {
    $items = Get-ChildItem -LiteralPath $toolsPath -Force | Where-Object { $_.Name -ieq "Process Explorer" }
    foreach ($item in $items) { Remove-Item -LiteralPath $item.FullName -Recurse -Force -ErrorAction Stop }
    $removed = $true
} catch { Write-Host "[ERROR] Failed to remove old Process Explorer content: $_" -ForegroundColor Red }
Show-Step $removed 0

try {
    Invoke-WebRequest -Uri $processExplorerUrl -OutFile $processExplorerZip
    Show-Step $true 1
} catch {
    Show-Step $false 1
}

try {
    Add-Type -AssemblyName System.IO.Compression.FileSystem
    if (Test-Path $procexpPath) { Remove-Item -Path $procexpPath -Recurse -Force -ErrorAction Stop }
    New-Item -ItemType Directory -Path $procexpPath -Force | Out-Null
    [System.IO.Compression.ZipFile]::ExtractToDirectory($processExplorerZip, $procexpPath)
    Remove-Item $processExplorerZip -Force
    Show-Step $true 2
} catch {
    Write-Host "[ERROR] Extraction failed: $($_.Exception.Message)" -ForegroundColor Red
    Show-Step $false 2
}

try {
    Start-Process -FilePath (Join-Path $procexpPath "procexp.exe") -WindowStyle Maximized -Verb RunAs
    Show-Step $true 3
} catch {
    Show-Step $false 3
}

try {
    Invoke-WebRequest -Uri $usbDeviewUrl -OutFile $usbDeviewZip
    Show-Step $true 4
} catch {
    Show-Step $false 4
}

try {
    if (Test-Path $usbdeviewPath) { Remove-Item -Path $usbdeviewPath -Recurse -Force -ErrorAction Stop }
    New-Item -ItemType Directory -Path $usbdeviewPath -Force | Out-Null
    [System.IO.Compression.ZipFile]::ExtractToDirectory($usbDeviewZip, $usbdeviewPath)
    Remove-Item $usbDeviewZip -Force
    Show-Step $true 5
} catch {
    Write-Host "[ERROR] USBDeview extraction failed: $($_.Exception.Message)" -ForegroundColor Red
    Show-Step $false 5
}

try {
    Start-Process -FilePath (Join-Path $usbdeviewPath "USBDeview.exe") -WindowStyle Normal
    Show-Step $true 6
} catch {
    Show-Step $false 6
}

Write-Host ""
$seconds = [math]::Round(((Get-Date) - $startTime).TotalSeconds,2)
$percent = [math]::Round(($successSteps / $totalSteps) * 100)
Write-Host "Result: $successSteps / $totalSteps steps succeeded ($percent%) in $seconds seconds." -ForegroundColor Cyan
